// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/naoki.miyoshi/Data/pjct/en/en/backend/test/scripts/../../internal/port/driver/api/interface.go

// Package mock_apiport is a generated GoMock package.
package mock_apiport

import (
	reflect "reflect"

	apiport "github.com/g-stayfresh/en/backend/internal/port/driver/api"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerAPIPortInterface is a mock of CustomerAPIPortInterface interface.
type MockCustomerAPIPortInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerAPIPortInterfaceMockRecorder
}

// MockCustomerAPIPortInterfaceMockRecorder is the mock recorder for MockCustomerAPIPortInterface.
type MockCustomerAPIPortInterfaceMockRecorder struct {
	mock *MockCustomerAPIPortInterface
}

// NewMockCustomerAPIPortInterface creates a new mock instance.
func NewMockCustomerAPIPortInterface(ctrl *gomock.Controller) *MockCustomerAPIPortInterface {
	mock := &MockCustomerAPIPortInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerAPIPortInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerAPIPortInterface) EXPECT() *MockCustomerAPIPortInterfaceMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerAPIPortInterface) CreateCustomer(customer *apiport.Customer) (*apiport.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", customer)
	ret0, _ := ret[0].(*apiport.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerAPIPortInterfaceMockRecorder) CreateCustomer(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerAPIPortInterface)(nil).CreateCustomer), customer)
}

// GetByID mocks base method.
func (m *MockCustomerAPIPortInterface) GetByID(customerID apiport.CustomerID) (*apiport.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", customerID)
	ret0, _ := ret[0].(*apiport.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCustomerAPIPortInterfaceMockRecorder) GetByID(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCustomerAPIPortInterface)(nil).GetByID), customerID)
}

// SearchCustomer mocks base method.
func (m *MockCustomerAPIPortInterface) SearchCustomer(pageNumber, pageSize int64, conditions *apiport.SearchConditions) (*apiport.CustomerSearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCustomer", pageNumber, pageSize, conditions)
	ret0, _ := ret[0].(*apiport.CustomerSearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchCustomer indicates an expected call of SearchCustomer.
func (mr *MockCustomerAPIPortInterfaceMockRecorder) SearchCustomer(pageNumber, pageSize, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCustomer", reflect.TypeOf((*MockCustomerAPIPortInterface)(nil).SearchCustomer), pageNumber, pageSize, conditions)
}

// UpdateByID mocks base method.
func (m *MockCustomerAPIPortInterface) UpdateByID(customer *apiport.Customer) (*apiport.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", customer)
	ret0, _ := ret[0].(*apiport.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockCustomerAPIPortInterfaceMockRecorder) UpdateByID(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockCustomerAPIPortInterface)(nil).UpdateByID), customer)
}
