// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/naoki.miyoshi/Data/pjct/en/en/backend/test/scripts/../../internal/port/driven/rdb/interface.go

// Package mock_rdbport is a generated GoMock package.
package mock_rdbport

import (
	reflect "reflect"

	customermodel "github.com/g-stayfresh/en/backend/internal/domain/model/customer"
	pagemodel "github.com/g-stayfresh/en/backend/internal/domain/model/page"
	gomock "github.com/golang/mock/gomock"
)

// MockRdbPortInterface is a mock of RdbPortInterface interface.
type MockRdbPortInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRdbPortInterfaceMockRecorder
}

// MockRdbPortInterfaceMockRecorder is the mock recorder for MockRdbPortInterface.
type MockRdbPortInterfaceMockRecorder struct {
	mock *MockRdbPortInterface
}

// NewMockRdbPortInterface creates a new mock instance.
func NewMockRdbPortInterface(ctrl *gomock.Controller) *MockRdbPortInterface {
	mock := &MockRdbPortInterface{ctrl: ctrl}
	mock.recorder = &MockRdbPortInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRdbPortInterface) EXPECT() *MockRdbPortInterfaceMockRecorder {
	return m.recorder
}

// CustomerCreate mocks base method.
func (m *MockRdbPortInterface) CustomerCreate(customer *customermodel.Customer) (*customermodel.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerCreate", customer)
	ret0, _ := ret[0].(*customermodel.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerCreate indicates an expected call of CustomerCreate.
func (mr *MockRdbPortInterfaceMockRecorder) CustomerCreate(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerCreate", reflect.TypeOf((*MockRdbPortInterface)(nil).CustomerCreate), customer)
}

// CustomerGet mocks base method.
func (m *MockRdbPortInterface) CustomerGet(customerID customermodel.ID) (*customermodel.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerGet", customerID)
	ret0, _ := ret[0].(*customermodel.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CustomerGet indicates an expected call of CustomerGet.
func (mr *MockRdbPortInterfaceMockRecorder) CustomerGet(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerGet", reflect.TypeOf((*MockRdbPortInterface)(nil).CustomerGet), customerID)
}

// CustomerSearch mocks base method.
func (m *MockRdbPortInterface) CustomerSearch(pageNumber, pageSize int64, conditions *customermodel.SearchConditions) (*[]*customermodel.Customer, *pagemodel.PageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerSearch", pageNumber, pageSize, conditions)
	ret0, _ := ret[0].(*[]*customermodel.Customer)
	ret1, _ := ret[1].(*pagemodel.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CustomerSearch indicates an expected call of CustomerSearch.
func (mr *MockRdbPortInterfaceMockRecorder) CustomerSearch(pageNumber, pageSize, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerSearch", reflect.TypeOf((*MockRdbPortInterface)(nil).CustomerSearch), pageNumber, pageSize, conditions)
}

// CustomerUpdate mocks base method.
func (m *MockRdbPortInterface) CustomerUpdate(customer *customermodel.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CustomerUpdate", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CustomerUpdate indicates an expected call of CustomerUpdate.
func (mr *MockRdbPortInterfaceMockRecorder) CustomerUpdate(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomerUpdate", reflect.TypeOf((*MockRdbPortInterface)(nil).CustomerUpdate), customer)
}
