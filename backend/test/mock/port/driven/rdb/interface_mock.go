// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/naoki.miyoshi/Data/pjct/en/en/backend/test/scripts/../../internal/port/driven/rdb/interface.go

// Package mock_rdbport is a generated GoMock package.
package mock_rdbport

import (
	reflect "reflect"

	customermodel "github.com/g-stayfresh/en/backend/internal/domain/model/customer"
	pagemodel "github.com/g-stayfresh/en/backend/internal/domain/model/page"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRdbPortInterface is a mock of CustomerRdbPortInterface interface.
type MockCustomerRdbPortInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRdbPortInterfaceMockRecorder
}

// MockCustomerRdbPortInterfaceMockRecorder is the mock recorder for MockCustomerRdbPortInterface.
type MockCustomerRdbPortInterfaceMockRecorder struct {
	mock *MockCustomerRdbPortInterface
}

// NewMockCustomerRdbPortInterface creates a new mock instance.
func NewMockCustomerRdbPortInterface(ctrl *gomock.Controller) *MockCustomerRdbPortInterface {
	mock := &MockCustomerRdbPortInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerRdbPortInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRdbPortInterface) EXPECT() *MockCustomerRdbPortInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRdbPortInterface) Create(customer *customermodel.Customer) (*customermodel.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", customer)
	ret0, _ := ret[0].(*customermodel.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRdbPortInterfaceMockRecorder) Create(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRdbPortInterface)(nil).Create), customer)
}

// Get mocks base method.
func (m *MockCustomerRdbPortInterface) Get(customerID customermodel.ID) (*customermodel.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", customerID)
	ret0, _ := ret[0].(*customermodel.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerRdbPortInterfaceMockRecorder) Get(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerRdbPortInterface)(nil).Get), customerID)
}

// Search mocks base method.
func (m *MockCustomerRdbPortInterface) Search(pageNumber, pageSize int64, conditions *customermodel.SearchConditions) (*[]*customermodel.Customer, *pagemodel.PageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", pageNumber, pageSize, conditions)
	ret0, _ := ret[0].(*[]*customermodel.Customer)
	ret1, _ := ret[1].(*pagemodel.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Search indicates an expected call of Search.
func (mr *MockCustomerRdbPortInterfaceMockRecorder) Search(pageNumber, pageSize, conditions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockCustomerRdbPortInterface)(nil).Search), pageNumber, pageSize, conditions)
}

// Update mocks base method.
func (m *MockCustomerRdbPortInterface) Update(customer *customermodel.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerRdbPortInterfaceMockRecorder) Update(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerRdbPortInterface)(nil).Update), customer)
}
